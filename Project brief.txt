Photographic Planning Aid

The objective of this is to help to make it easier to plan successful trips in a simple intuitive manner.

As a user I want to be able to:

- Use a fully interactive map to select potential places to visit
- Click on a location to find out sunrise / sunset times
- Click on a coastal location to find out tide times
- Store the location details along with the above details
- Maintain the acquired information from above

MVP:

Create and maintain a list of locations and attributes using a database.
This will be achieved by utilising Google maps or Leaflet API to present locations in a standard user friendly manner.
The existing list of places should be highlighted on the map in the usual manner.
For coastal locations, display the tide times.
Sunrise / Sunset times should be displayed - using the Suncalc api.
https://github.com/mourner/suncalc



Extensions..

For locations, where applicable create extra table for friends / accomodation.
Draw lines showing the transit of the sun during the day.
Link into Late Rooms / Booking for arranging accomodation.
Link to Traveline to find Public transport to the location. API looks very complex.




Techy notes..


Google Maps.
https://developers.google.com/maps/documentation/javascript/examples/


Suncalc.


// get today's sunlight times for London
var times = SunCalc.getTimes(new Date(), 51.5, -0.1);

// format sunrise time from the Date object
var sunriseStr = times.sunrise.getHours() + ':' + times.sunrise.getMinutes();

// get position of the sun (azimuth and altitude) at today's sunrise
var sunrisePos = SunCalc.getPosition(times.sunrise, 51.5, -0.1);

// get sunrise azimuth in degrees
var sunriseAzimuth = sunrisePos.azimuth * 180 / Math.PI;
SunCalc is also available as an NPM package:

$ npm install suncalc
var SunCalc = require('suncalc');
Reference
Sunlight times
SunCalc.getTimes(/*Date*/ date, /*Number*/ latitude, /*Number*/ longitude)
Returns an object with the following properties (each is a Date object):

Property	Description
sunrise	sunrise (top edge of the sun appears on the horizon)
sunriseEnd	sunrise ends (bottom edge of the sun touches the horizon)
goldenHourEnd	morning golden hour (soft light, best time for photography) ends
solarNoon	solar noon (sun is in the highest position)
goldenHour	evening golden hour starts
sunsetStart	sunset starts (bottom edge of the sun touches the horizon)
sunset	sunset (sun disappears below the horizon, evening civil twilight starts)
dusk	dusk (evening nautical twilight starts)
nauticalDusk	nautical dusk (evening astronomical twilight starts)
night	night starts (dark enough for astronomical observations)
nadir	nadir (darkest moment of the night, sun is in the lowest position)
nightEnd	night ends (morning astronomical twilight starts)
nauticalDawn	nautical dawn (morning nautical twilight starts)
dawn	dawn (morning nautical twilight ends, morning civil twilight starts)
SunCalc.addTime(/*Number*/ angleInDegrees, /*String*/ morningName, /*String*/ eveningName)
Adds a custom time when the sun reaches the given angle to results returned by SunCalc.getTimes.

SunCalc.times property contains all currently defined times.

Sun position
SunCalc.getPosition(/*Date*/ timeAndDate, /*Number*/ latitude, /*Number*/ longitude)
Returns an object with the following properties:

altitude: sun altitude above the horizon in radians, e.g. 0 at the horizon and PI/2 at the zenith (straight over your head)
azimuth: sun azimuth in radians (direction along the horizon, measured from south to west), e.g. 0 is south and Math.PI * 3/4 is northwest
Moon position
SunCalc.getMoonPosition(/*Date*/ timeAndDate, /*Number*/ latitude, /*Number*/ longitude)
Returns an object with the following properties:

altitude: moon altitude above the horizon in radians
azimuth: moon azimuth in radians
distance: distance to moon in kilometers
parallacticAngle: parallactic angle of the moon in radians
Moon illumination
SunCalc.getMoonIllumination(/*Date*/ timeAndDate)
Returns an object with the following properties:

fraction: illuminated fraction of the moon; varies from 0.0 (new moon) to 1.0 (full moon)
phase: moon phase; varies from 0.0 to 1.0, described below
angle: midpoint angle in radians of the illuminated limb of the moon reckoned eastward from the north point of the disk; the moon is waxing if the angle is negative, and waning if positive
Moon phase value should be interpreted like this:

Phase	Name
0	New Moon
Waxing Crescent
0.25	First Quarter
Waxing Gibbous
0.5	Full Moon
Waning Gibbous
0.75	Last Quarter
Waning Crescent
By subtracting the parallacticAngle from the angle one can get the zenith angle of the moons bright limb (anticlockwise). The zenith angle can be used do draw the moon shape from the observers perspective (e.g. moon lying on its back).

Moon rise and set times
SunCalc.getMoonTimes(/*Date*/ date, /*Number*/ latitude, /*Number*/ longitude[, inUTC])
Returns an object with the following properties:

rise: moonrise time as Date
set: moonset time as Date
alwaysUp: true if the moon never rises/sets and is always above the horizon during the day
alwaysDown: true if the moon is always below the horizon
By default, it will search for moon rise and set during local user's day (frou 0 to 24 hours). If inUTC is set to true, it will instead search the specified date from 0 to 24 UTC hours.
